
LCDprinttable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000034c  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000b49  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ce  00000000  00000000  00000b91  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000185  00000000  00000000  0000135f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f9  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016c  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035d  00000000  00000000  000019e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001d3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  7a:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8disp_cmdj>:
	disp_cmd(0X06);
}

void disp_cmd(unsigned int cmd)
{
	PORTB=((cmd & 0XF0)+0X04);
  82:	9c 01       	movw	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	33 27       	eor	r19, r19
  88:	2c 5f       	subi	r18, 0xFC	; 252
  8a:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	e9 ef       	ldi	r30, 0xF9	; 249
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z8disp_cmdj+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_Z8disp_cmdj+0x14>
  96:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	94 50       	subi	r25, 0x04	; 4
  9c:	98 bb       	out	0x18, r25	; 24
	PORTB=(((cmd<<4)& 0XF0)+0X04);
  9e:	82 95       	swap	r24
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	8c 5f       	subi	r24, 0xFC	; 252
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z8disp_cmdj+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z8disp_cmdj+0x2e>
  b0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 50       	subi	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <_Z8lcd_initv>:
		


void lcd_init()
{
	disp_cmd(0X02);
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X28);
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X0C);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X06);
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
  da:	08 95       	ret

000000dc <_Z9disp_datai>:
	PORTB=PORTB-0X04;
	
}
void disp_data( int cmd)
{
	PORTB=((cmd  & 0XF0)+0X05);
  dc:	9c 01       	movw	r18, r24
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	33 27       	eor	r19, r19
  e2:	2b 5f       	subi	r18, 0xFB	; 251
  e4:	28 bb       	out	0x18, r18	; 24
  e6:	e9 ef       	ldi	r30, 0xF9	; 249
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <_Z9disp_datai+0xe>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_Z9disp_datai+0x14>
  f0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  f2:	28 b3       	in	r18, 0x18	; 24
  f4:	24 50       	subi	r18, 0x04	; 4
  f6:	28 bb       	out	0x18, r18	; 24
	PORTB=(((cmd <<4)& 0XF0)+0X05);
  f8:	82 95       	swap	r24
  fa:	92 95       	swap	r25
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	98 27       	eor	r25, r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	98 27       	eor	r25, r24
 104:	8b 5f       	subi	r24, 0xFB	; 251
 106:	88 bb       	out	0x18, r24	; 24
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <_Z9disp_datai+0x30>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z9disp_datai+0x36>
 112:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
 114:	88 b3       	in	r24, 0x18	; 24
 116:	84 50       	subi	r24, 0x04	; 4
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret

0000011c <_Z11disp_stringPc>:
	
}

void disp_string( char *str)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!='\0')
 122:	88 81       	ld	r24, Y
 124:	88 23       	and	r24, r24
 126:	39 f0       	breq	.+14     	; 0x136 <_Z11disp_stringPc+0x1a>
	_delay_ms(1);
	PORTB=PORTB-0X04;
	
}

void disp_string( char *str)
 128:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (str[i]!='\0')
	{
		disp_data (str[i]);
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
}

void disp_string( char *str)
{
	int i=0;
	while (str[i]!='\0')
 130:	89 91       	ld	r24, Y+
 132:	81 11       	cpse	r24, r1
 134:	fa cf       	rjmp	.-12     	; 0x12a <_Z11disp_stringPc+0xe>
	{
		disp_data (str[i]);
		i++;
		
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <_Z8disp_numj>:

void disp_num(unsigned int num)
{
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
	int a=0;
	if (num==0)
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	61 f5       	brne	.+88     	; 0x1a2 <_Z8disp_numj+0x66>
	{
		disp_data(48);
 14a:	80 e3       	ldi	r24, 0x30	; 48
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	}
	disp_cmd (0X04);
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 15a:	28 c0       	rjmp	.+80     	; 0x1ac <_Z8disp_numj+0x70>
	while (num!=0)
	{
		a=num % 10;
 15c:	9e 01       	movw	r18, r28
 15e:	ad ec       	ldi	r26, 0xCD	; 205
 160:	bc ec       	ldi	r27, 0xCC	; 204
 162:	0e 94 98 01 	call	0x330	; 0x330 <__umulhisi3>
 166:	8c 01       	movw	r16, r24
 168:	16 95       	lsr	r17
 16a:	07 95       	ror	r16
 16c:	16 95       	lsr	r17
 16e:	07 95       	ror	r16
 170:	16 95       	lsr	r17
 172:	07 95       	ror	r16
 174:	98 01       	movw	r18, r16
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	c8 01       	movw	r24, r16
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	9e 01       	movw	r18, r28
 18e:	28 1b       	sub	r18, r24
 190:	39 0b       	sbc	r19, r25
 192:	c9 01       	movw	r24, r18
		disp_data(a+48);
 194:	c0 96       	adiw	r24, 0x30	; 48
 196:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
		num=num/10;
 19a:	e8 01       	movw	r28, r16
	if (num==0)
	{
		disp_data(48);
	}
	disp_cmd (0X04);
	while (num!=0)
 19c:	20 97       	sbiw	r28, 0x00	; 0
 19e:	f1 f6       	brne	.-68     	; 0x15c <_Z8disp_numj+0x20>
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <_Z8disp_numj+0x70>
	int a=0;
	if (num==0)
	{
		disp_data(48);
	}
	disp_cmd (0X04);
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 1aa:	d8 cf       	rjmp	.-80     	; 0x15c <_Z8disp_numj+0x20>
	{
		a=num % 10;
		disp_data(a+48);
		num=num/10;
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <main>:
void disp_num(unsigned int num);
void disp_string(  char *str);
int main(void)
{
	int i,j,k;
	DDRB = 0XFF;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	87 bb       	out	0x17, r24	; 23

	lcd_init();
 1ba:	0e 94 5d 00 	call	0xba	; 0xba <_Z8lcd_initv>
    while(1)
	{
   
   for (k=2;k<=9;k++)
 1be:	68 94       	set
 1c0:	cc 24       	eor	r12, r12
 1c2:	c1 f8       	bld	r12, 1
 1c4:	d1 2c       	mov	r13, r1
void lcd_init();
void disp_cmd(unsigned int cmd);
void disp_data(int cmd);
void disp_num(unsigned int num);
void disp_string(  char *str);
int main(void)
 1c6:	aa 24       	eor	r10, r10
 1c8:	a3 94       	inc	r10
 1ca:	b1 2c       	mov	r11, r1

	lcd_init();
    while(1)
	{
   
   for (k=2;k<=9;k++)
 1cc:	68 94       	set
 1ce:	88 24       	eor	r8, r8
 1d0:	81 f8       	bld	r8, 1
 1d2:	91 2c       	mov	r9, r1
 1d4:	a9 c0       	rjmp	.+338    	; 0x328 <main+0x172>
    
		
		
		for (i=1;i<=4;i++)
		{
			disp_cmd(0X80);
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_string ( "Table of ");
 1de:	80 e6       	ldi	r24, 0x60	; 96
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11disp_stringPc>
			disp_cmd(0X8A);
 1e6:	8a e8       	ldi	r24, 0x8A	; 138
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_num(k);
 1ee:	c8 01       	movw	r24, r16
 1f0:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z8disp_numj>
			disp_cmd(0XC0);
 1f4:	80 ec       	ldi	r24, 0xC0	; 192
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_num(k);
 1fc:	c8 01       	movw	r24, r16
 1fe:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z8disp_numj>
			disp_cmd(0XC1);
 202:	81 ec       	ldi	r24, 0xC1	; 193
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_data(42);
 20a:	8a e2       	ldi	r24, 0x2A	; 42
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
			disp_cmd(0XC2);
 212:	82 ec       	ldi	r24, 0xC2	; 194
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_num(i);
 21a:	ce 01       	movw	r24, r28
 21c:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z8disp_numj>
			disp_cmd(0XC3);
 220:	83 ec       	ldi	r24, 0xC3	; 195
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_data(61);
 228:	8d e3       	ldi	r24, 0x3D	; 61
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
			disp_cmd(0XC6);
 230:	86 ec       	ldi	r24, 0xC6	; 198
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			j=(k*i);
			disp_num(j);
 238:	c7 01       	movw	r24, r14
 23a:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z8disp_numj>
 23e:	2f e3       	ldi	r18, 0x3F	; 63
 240:	8d e0       	ldi	r24, 0x0D	; 13
 242:	93 e0       	ldi	r25, 0x03	; 3
 244:	21 50       	subi	r18, 0x01	; 1
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x8e>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x98>
 24e:	00 00       	nop
			_delay_ms(1000);
			disp_cmd(0X01);
 250:	c5 01       	movw	r24, r10
 252:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 256:	83 ec       	ldi	r24, 0xC3	; 195
 258:	99 e0       	ldi	r25, 0x09	; 9
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <main+0xa4>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0xaa>
 260:	00 00       	nop
   
   
    
		
		
		for (i=1;i<=4;i++)
 262:	21 96       	adiw	r28, 0x01	; 1
 264:	e0 0e       	add	r14, r16
 266:	f1 1e       	adc	r15, r17
 268:	c5 30       	cpi	r28, 0x05	; 5
 26a:	d1 05       	cpc	r29, r1
 26c:	09 f0       	breq	.+2      	; 0x270 <main+0xba>
 26e:	b3 cf       	rjmp	.-154    	; 0x1d6 <main+0x20>
void lcd_init();
void disp_cmd(unsigned int cmd);
void disp_data(int cmd);
void disp_num(unsigned int num);
void disp_string(  char *str);
int main(void)
 270:	76 01       	movw	r14, r12
 272:	ee 0c       	add	r14, r14
 274:	ff 1c       	adc	r15, r15
 276:	ee 0c       	add	r14, r14
 278:	ff 1c       	adc	r15, r15
 27a:	ec 0c       	add	r14, r12
 27c:	fd 1c       	adc	r15, r13
			_delay_ms(10);
		}
		
		for (i=5;i<=10;i++)
		{
			disp_cmd(0X80);
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_string ( "Table of ");
 286:	80 e6       	ldi	r24, 0x60	; 96
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z11disp_stringPc>
			disp_cmd(0X8A);
 28e:	8a e8       	ldi	r24, 0x8A	; 138
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_num(k);
 296:	c8 01       	movw	r24, r16
 298:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z8disp_numj>
			disp_cmd(0XC0);
 29c:	80 ec       	ldi	r24, 0xC0	; 192
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_num(k);
 2a4:	c8 01       	movw	r24, r16
 2a6:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z8disp_numj>
			disp_cmd(0XC1);
 2aa:	81 ec       	ldi	r24, 0xC1	; 193
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_data(42);
 2b2:	8a e2       	ldi	r24, 0x2A	; 42
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
			disp_cmd(0XC3);
 2ba:	83 ec       	ldi	r24, 0xC3	; 195
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_num(i);
 2c2:	ce 01       	movw	r24, r28
 2c4:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z8disp_numj>
			disp_cmd(0XC4);
 2c8:	84 ec       	ldi	r24, 0xC4	; 196
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			disp_data(61);
 2d0:	8d e3       	ldi	r24, 0x3D	; 61
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
			
			disp_cmd(0XC6);
 2d8:	86 ec       	ldi	r24, 0xC6	; 198
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
			j=(k*i);
			disp_num(j);
 2e0:	c7 01       	movw	r24, r14
 2e2:	0e 94 9e 00 	call	0x13c	; 0x13c <_Z8disp_numj>
 2e6:	9f e3       	ldi	r25, 0x3F	; 63
 2e8:	2d e0       	ldi	r18, 0x0D	; 13
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	91 50       	subi	r25, 0x01	; 1
 2ee:	20 40       	sbci	r18, 0x00	; 0
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x136>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x140>
 2f6:	00 00       	nop
			_delay_ms(1000);
			disp_cmd(0X01);
 2f8:	c5 01       	movw	r24, r10
 2fa:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 2fe:	83 ec       	ldi	r24, 0xC3	; 195
 300:	99 e0       	ldi	r25, 0x09	; 9
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	f1 f7       	brne	.-4      	; 0x302 <main+0x14c>
 306:	00 c0       	rjmp	.+0      	; 0x308 <main+0x152>
 308:	00 00       	nop
			_delay_ms(1000);
			disp_cmd(0X01);
			_delay_ms(10);
		}
		
		for (i=5;i<=10;i++)
 30a:	21 96       	adiw	r28, 0x01	; 1
 30c:	e0 0e       	add	r14, r16
 30e:	f1 1e       	adc	r15, r17
 310:	cb 30       	cpi	r28, 0x0B	; 11
 312:	d1 05       	cpc	r29, r1
 314:	09 f0       	breq	.+2      	; 0x318 <main+0x162>
 316:	b3 cf       	rjmp	.-154    	; 0x27e <main+0xc8>

	lcd_init();
    while(1)
	{
   
   for (k=2;k<=9;k++)
 318:	9f ef       	ldi	r25, 0xFF	; 255
 31a:	c9 1a       	sub	r12, r25
 31c:	d9 0a       	sbc	r13, r25
 31e:	2a e0       	ldi	r18, 0x0A	; 10
 320:	c2 16       	cp	r12, r18
 322:	d1 04       	cpc	r13, r1
 324:	0c f0       	brlt	.+2      	; 0x328 <main+0x172>
 326:	64 01       	movw	r12, r8
void lcd_init();
void disp_cmd(unsigned int cmd);
void disp_data(int cmd);
void disp_num(unsigned int num);
void disp_string(  char *str);
int main(void)
 328:	86 01       	movw	r16, r12
 32a:	76 01       	movw	r14, r12
 32c:	e5 01       	movw	r28, r10
 32e:	53 cf       	rjmp	.-346    	; 0x1d6 <main+0x20>

00000330 <__umulhisi3>:
 330:	a2 9f       	mul	r26, r18
 332:	b0 01       	movw	r22, r0
 334:	b3 9f       	mul	r27, r19
 336:	c0 01       	movw	r24, r0
 338:	a3 9f       	mul	r26, r19
 33a:	01 d0       	rcall	.+2      	; 0x33e <__umulhisi3+0xe>
 33c:	b2 9f       	mul	r27, r18
 33e:	70 0d       	add	r23, r0
 340:	81 1d       	adc	r24, r1
 342:	11 24       	eor	r1, r1
 344:	91 1d       	adc	r25, r1
 346:	08 95       	ret

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
